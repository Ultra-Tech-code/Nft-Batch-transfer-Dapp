{"version":3,"sources":["components/ui/Notifications.js","utils/index.js","utils/constants.js","components/ui/Identicon.js","components/Wallet.js","logo.svg","components/Cover.js","utils/batchTransfer.js","components/ui/Loader.js","hooks/useContract.js","components/BatchTransfer.js","hooks/useERC721.js","App.js","hooks/useBalance.js","hooks/useBatchTransferContract.js","reportWebVitals.js","index.js"],"names":["Notification","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","NotificationSuccess","text","className","NotificationError","NotificationInfo","DefaultProps","defaultProps","truncateAddress","address","slice","length","formatBigNumber","num","shiftedBy","toFixed","Identicon","size","rest","ref","useRef","useEffect","current","innerHTML","appendChild","Jazzicon","parseInt","style","width","height","Wallet","amount","symbol","destroy","Dropdown","Toggle","variant","align","id","Spinner","animation","Menu","Item","href","target","Stack","direction","gap","Divider","as","onClick","Cover","connect","connectWallet","console","log","e","src","logo","alt","Button","batchSend","batchTransferContract","performActions","assetaddress","_to","_totalID","newId","split","map","Number","kit","defaultAccount","methods","bulkTransfer","send","from","on","hash","toast","value","events","TransferSuccessfull","returnValues","message","includes","getTotalTransfer","getallCollection","call","Loader","role","useContract","abi","contractAddress","useContractKit","getConnectedKit","useState","contract","setContract","getContract","useCallback","web3","eth","Contract","BatchTransfer","_tokenAddress","loading","setLoading","status","nftId","setnftId","receiver","setReceiver","totalID","settotalID","setMessage","useContext","addressAPI","tokenAddress","settokenAddress","erc271Contract","erc721","getTotal","error","updateInput","approve","setApprovalForAll","BatchTransferAddress","POSITION","TOP_LEFT","Card","Header","Body","Title","onSubmit","event","preventDefault","type","name","placeholder","onChange","React","createContext","App","balance","setBalance","getBalance","getTotalBalance","useBalance","Provider","Container","fluid","Nav","CELO","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","networks","Alfajores","network","NetworkNames","rpcUrl","graphQl","explorer","chainId","dapp","description","document","getElementById"],"mappings":"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","file":"static/js/main.6ca29e20.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { ToastContainer } from \"react-toastify\";\n\nconst Notification = () => (\n  <ToastContainer\n    position=\"bottom-center\"\n    autoClose={5000}\n    hideProgressBar\n    newestOnTop\n    closeOnClick\n    rtl={false}\n    pauseOnFocusLoss\n    draggable={false}\n    pauseOnHover\n  />\n);\n\nconst NotificationSuccess = ({ text }) => (\n  <div>\n    <i className=\"bi bi-check-circle-fill text-success mx-2\" />\n    <span className=\"text-secondary mx-1\">{text}</span>\n  </div>\n);\n\nconst NotificationError = ({ text }) => (\n  <div>\n    <i className=\"bi bi-x-circle-fill text-danger mx-2\" />\n    <span className=\"text-secondary mx-1\">{text}</span>\n  </div>\n);\n\nconst NotificationInfo = ({ text }) => (\n  <div>\n    <i className=\"bi bi-bell-fill text-info mx-2\" />\n    <span className=\"text-secondary mx-1\">{text} &#127881;</span>\n  </div>\n);\n\n\nconst Props = {\n  text: PropTypes.string,\n};\n\nconst DefaultProps = {\n  text: \"\",\n};\n\nNotificationInfo.propTypes = Props;\nNotificationInfo.defaultProps = DefaultProps;\n\nNotificationSuccess.propTypes = Props;\nNotificationSuccess.defaultProps = DefaultProps;\n\nNotificationError.propTypes = Props;\nNotificationError.defaultProps = DefaultProps;\n\nexport { Notification, NotificationSuccess, NotificationError, NotificationInfo };\n","import {ERC20_DECIMALS} from \"./constants\";\n\n// format a wallet address\nexport const truncateAddress = (address) => {\n    if (!address) return\n    return address.slice(0, 5) + \"...\" + address.slice(address.length - 4, address.length);\n}\n\n// convert from big number\nexport const formatBigNumber = (num) => {\n    if (!num) return\n    return num.shiftedBy(-ERC20_DECIMALS).toFixed(2);\n}","const ERC20_DECIMALS = 18;\nexport { ERC20_DECIMALS };\n","import { useEffect, useRef } from \"react\";\nimport Jazzicon from \"@metamask/jazzicon\";\n\nexport default function Identicon({ address, size, ...rest }) {\n  const ref = useRef();\n\n  useEffect(() => {\n    if (address && ref.current) {\n      ref.current.innerHTML = \"\";\n      ref.current.appendChild(\n        Jazzicon(size, parseInt(address.slice(2, 10), 16))\n      );\n    }\n  }, [address, size]);\n\n  return (\n    <div {...rest}>\n      <div ref={ref} style={{ width: `${size}px`, height: `${size}px` }} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Dropdown, Stack, Spinner } from \"react-bootstrap\";\nimport { formatBigNumber, truncateAddress } from \"./../utils\";\nimport Identicon from \"./ui/Identicon\";\n\nconst Wallet = ({ address, amount, symbol, destroy }) => {\n  if (address) {\n    return (\n      <>\n        <Dropdown>\n          <Dropdown.Toggle\n            variant=\"light\"\n            align=\"end\"\n            id=\"dropdown-basic\"\n            className=\"d-flex align-items-center border rounded-pill py-1\"\n          >\n            {amount ? (\n              <>\n                {formatBigNumber(amount)}{\" \"}\n                <span className=\"ms-1\"> {symbol}</span>\n              </>\n            ) : (\n              <Spinner animation=\"border\" size=\"sm\" className=\"opacity-25\" />\n            )}\n            <Identicon address={address} size={28} className=\"ms-2 me-1\" />\n          </Dropdown.Toggle>\n\n          <Dropdown.Menu className=\"shadow-lg border-0\">\n            <Dropdown.Item\n              href={`https://alfajores-blockscout.celo-testnet.org/address/${address}/transactions`}\n              target=\"_blank\"\n            >\n              <Stack direction=\"horizontal\" gap={2}>\n                <i className=\"bi bi-person-circle fs-4\" />\n                <span className=\"font-monospace\">\n                  {truncateAddress(address)}\n                </span>\n              </Stack>\n            </Dropdown.Item>\n            <Dropdown.Divider />\n            <Dropdown.Item\n              as=\"button\"\n              className=\"d-flex align-items-center\"\n              onClick={() => {\n                destroy();\n              }}\n            >\n              <i className=\"bi bi-box-arrow-right me-2 fs-4\" />\n              Disconnect\n            </Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n      </>\n    );\n  }\n\n  return null;\n};\n\nexport default Wallet;\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from \"../logo.svg\";\nimport { Button } from \"react-bootstrap\";\n\nconst Cover = ({ connect }) => {\n  const connectWallet = async () => {\n    try {\n      await connect();\n    } catch (e) {\n      console.log({ e });\n    }\n  };\n  return (\n    <>\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      <p>Batch NfT Transfer</p>\n      <Button variant=\"primary\" onClick={connectWallet}>\n        Connect Wallet\n      </Button>\n    </>\n  );\n};\n\nexport default Cover;\n","//import { ethers } from \"ethers\";\nimport { toast } from \"react-toastify\";\nimport{ NotificationSuccess, NotificationError } from \"../components/ui/Notifications\"\n//const provider = new ethers.providers.Web3Provider(window.ethereum);\n\n\nexport const batchSend = async (batchTransferContract, performActions, assetaddress, id, _to, _totalID) => {\n    let newId = id.split(',').map((num)=>{\n        return Number(num)\n      })  \n      \n    //   const isTransactionMined = async() => {\n    //     const txReceipt = await provider.getTransactionReceipt(hash);\n    //     if (txReceipt && txReceipt.blockNumber) {\n    //         return txReceipt;\n    //     }\n    // }\n      \n    try {\n        await performActions(async (kit) => {\n            \n            const {defaultAccount} = kit;\n            const value = await batchTransferContract.methods.bulkTransfer(defaultAccount, assetaddress, _to, newId, _totalID).send({from: defaultAccount}).on('transactionHash', function(hash){\n                console.log(\"hash \"+ hash)\n                toast(<NotificationSuccess text=\"NFT's Sending, ~3 minute remaining....\" />);\n            })\n            toast(<NotificationSuccess text=\"All NFT's Sent....\" />)\n\n            console.log(\"value receipt \", value.events.TransferSuccessfull.returnValues)\n\n            \n            \n            // if(value.events === 0){\n            //     toast(<NotificationSuccess text=\"All NFT's Sent....\" />);\n            // }\n\n\n            // const notTransferredCount = value[0];\n            // const _totalId = value[1];\n\n            // if (notTransferredCount < _totalId) {\n            //     const finalNotOwnerId = [](notTransferredCount);\n            //     for (let index = 0; index < notTransferredCount; index++) {\n            //         finalNotOwnerId[index] = _totalId[index];\n            //     }\n            //     toast(<NotificationSuccess text=\"NFT's Sent....\" />);\n            //     toast(<NotificationError text={`NFT's with this ID ${finalNotOwnerId} not sent, kindly verify that you own it....`} autoClose={10000} />);\n            // } else {\n            //     toast(<NotificationSuccess text=\"NFT's Sent....\" />);\n            //     toast(<NotificationError text={`NFT's with this ID ${_totalId} not sent, kindly verify that you own it....`} autoClose={10000} />);    \n            // }\n            \n        });\n    } catch (e) {\n        if(e.message.includes(\"Transaction was not mined within 50 blocks, please make sure your transaction was properly sent. Be aware that it might still be mined!\")) {\n            toast(<NotificationSuccess text=\"NFT's Sent....\" />);\n            // const receipt = await isTransactionMined()\n            // console.log(receipt)\n    \n              }else{\n                toast(<NotificationError text=\"NFT's not Sent....\" />);\n                console.log({e});\n        }\n    }\n};\n\nexport const getTotalTransfer = async (batchTransferContract) => {\n    try {\n        const value =  await batchTransferContract.methods.getallCollection().call();\n        return value.length;\n    } catch (e) {\n        console.log({e});\n    }\n};\n\n\nexport const getEvent = async (batchTransferContract, performActions, _to ) => {\n    //const eventName = \"TransferSuccessfull\";\n    console.log(\"event block\")\n    try {\n        // await performActions(async (kit) => {\n        //     const {defaultAccount} = kit;\n\n        //     // const options = {\n        //     //     fromBlock: 0,\n        //     //     toBlock: 1000000, // can also pass \"latest\"\n        //     //     order: \"desc\",\n        //     //     // Configure event filters (filter on indexed event parameters)\n        //     //     filters: {\n        //     //       from: defaultAccount,\n        //     //       to: _to\n        //     //     }\n        //     //   };\n        //     // const events = await batchTransferContract.events(eventName, options).send({from: defaultAccount});\n        //     // console.log(events[0].eventName);\n        //     // console.log(events[0].data);\n        //     // return events[0].data;\n        //     provider.on(eventName , () => {\n        //         console.log(\"success \")\n        //         return \"success\"\n        //    })\n        // });\n    //     provider.on(eventName , () => {\n    //         console.log(\"success \")\n    //         return \"success\"\n    //    })\n      \n    } catch (e) {\n        console.log({e});\n    }\n};\n\n\n","import React from \"react\";\nimport { Spinner } from \"react-bootstrap\";\n\nconst Loader = () => (\n  <div className=\"d-flex justify-content-center\">\n    <Spinner animation=\"border\" role=\"status\" className=\"opacity-25\">\n      <span className=\"visually-hidden\">Loading...</span>\n    </Spinner>\n  </div>\n);\nexport default Loader;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\n\nexport const useContract = (abi, contractAddress) => {\n  const { getConnectedKit, address } = useContractKit();\n  const [contract, setContract] = useState(null);\n\n  const getContract = useCallback(async () => {\n    const kit = await getConnectedKit();\n    setContract(new kit.web3.eth.Contract(abi, contractAddress));\n  }, [getConnectedKit, abi, contractAddress]);\n\n  useEffect(() => {\n    if (address) getContract();\n  }, [address, getContract]);\n\n  return contract;\n};\n","import React, { useState, useContext, useEffect } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { Card, Button } from \"react-bootstrap\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport {  batchSend, getEvent, getTotalTransfer } from \"../utils/batchTransfer\";\nimport Loader from \"./ui/Loader\";\nimport { addressAPI } from \"../App\";\nimport { useERC721 } from \"../hooks/useERC721\";\nimport BatchTransferAddress from \"../contracts/BatchTransferAddress.json\";\nimport{ NotificationInfo, NotificationSuccess, NotificationError } from \"./ui/Notifications\"\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst BatchTransfer = ({ batchTransferContract }) => {\n  const [loading, setLoading] = useState(false);\n  const [status, setStatus] = useState(\"\");\n  const { performActions } = useContractKit();\n  const [nftId, setnftId] = useState(\"\");\n  const [receiver, setReceiver] = useState(\"\");\n  const [totalID, settotalID] = useState(\"\");\n  const [message, setMessage] = useState([]);\n  const {tokenAddress, settokenAddress} = useContext(addressAPI); \n\n  const erc271Contract=  useERC721(tokenAddress)\n\nuseEffect(() => {\n  try { \n      if (batchTransferContract ) {\n        getTotal();\n      }\n  } catch (error) {\n      console.log({error});\n  }\n}, [batchTransferContract, getTotalTransfer]);\n\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    setMessage([`${tokenAddress}`,`${nftId}`, `${receiver}`]);\n\n  };\n\n  const updateInput =() => {\n    settokenAddress(\"\");\n    setnftId(\"\");\n    setReceiver(\"\");\n    settotalID(\"\");\n  }\n\n  const updateSendStatus = async (_receiver) => {\n    try {\n      setLoading(true);\n      const value = await getEvent(batchTransferContract, performActions, _receiver);\n      console.log(\"value \", value)\n      setStatus(value);\n    } catch (e) {\n      console.log({ e });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n\n  const approve = async () => {\n    try {\n      await performActions(async (kit) => {\n          const {defaultAccount} = kit;\n          await  erc271Contract.methods.setApprovalForAll( BatchTransferAddress?.BatchTransfer, true).send({from: defaultAccount});\n        toast(<NotificationSuccess text=\"Approval Successfull....\" />);\n      });\n  } catch (e) {\n    toast(<NotificationError text=\"OOps, Approval Failed.\" />);\n      console.log({e});\n  }\n\n  }\n\n  const send = async () => {   \n    try {\n      setLoading(true);\n      \n     await approve(tokenAddress, performActions)\n\n      await batchSend(batchTransferContract, performActions, tokenAddress, nftId, receiver, totalID);\n      updateInput()\n      //await updateSendStatus(receiver)\n    } catch (e) {\n      updateInput()\n      console.log({ e }); \n    } finally {\n      setLoading(false);\n    }\n  };\n\n\n  const getTotal = async () => {   \n    try {\n      setLoading(true);  \n      const value = await getTotalTransfer(batchTransferContract)\n    toast(<NotificationInfo  text= {`Proceessed ${value} transaction, when processing thousands of nft, wallet might throw gas estimation error, kindly click \"I want to proceed anyway\"`}/>\n    ,{position: toast.POSITION.TOP_LEFT}); \n    } catch (e) {\n      console.log({ e });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n\n\n  return (\n    <Card className=\"text-center w-50 m-auto\" id=\"bg-form\">\n      <Card.Header className=\"font-weight-bold text-dark\">BULK NFT TRANSFERER</Card.Header>\n  \n      <Card.Body className=\"mt-4\">\n        <Card.Title></Card.Title>\n        <br />\n\n        {!loading ? (\n\n          <div className=\"d-grid gap-2 d-md-block\">\n\n<form onSubmit={handleSubmit}>\n        <div className=\"input-group mb-3\">\n          <div className=\"input-group-prepend\">\n            <span className=\"input-group-text\" id=\"tokenAddress\">&#x1F47E;</span>\n          </div>\n          <input type=\"text\" id=\"tokenAddress\" name=\"tokenAddress\" className=\"form-control\" value={tokenAddress} placeholder=\"asset contract addresss\"\n          onChange={(event) => settokenAddress(event.target.value)} aria-describedby=\"tokenAddress\"\n        />\n        </div>\n\n        <br />\n\n        <div className=\"input-group mb-3\">\n          <div className=\"input-group-prepend\">\n            <span className=\"input-group-text\" id=\"nftId\">&#x1F575;</span>\n          </div>\n          <input type=\"text\" id=\"nftId\" name=\"lastName\" className=\"form-control\" value={nftId} placeholder=\"Enter nft id's 0, 1, 2\"\n          onChange={(event) => { setnftId(event.target.value); }} aria-describedby=\"nftId\"\n        />\n        </div>\n\n        <br />\n        <div className=\"input-group mb-3\">\n          <div className=\"input-group-prepend\">\n            <span className=\"input-group-text\" id=\"receiver\">&#x1F91D;</span>\n          </div>\n          <input type=\"text\" id=\"receiver\" name=\"Receiver\" className=\"form-control\" value={receiver} placeholder=\"Enter receiver address\"\n          onChange={(event) => { setReceiver(event.target.value);}} aria-describedby=\"receiver\"\n        />\n        </div>\n\n        <br />\n\n        <div className=\"input-group mb-3\">\n          <div className=\"input-group-prepend\">\n            <span className=\"input-group-text\" id=\"totalID\">&#x1F680;</span>\n          </div>\n          <input type=\"text\" id=\"totalID\" name=\"TotalID\" className=\"form-control\" value={totalID} placeholder=\"Enter the totalID\"\n          onChange={(event) => { settotalID(event.target.value);}} aria-describedby=\"totalID\"\n        />\n        </div>\n\n      \n        <Button className=\"m-2\"  variant=\"dark\" size=\"lg\" type=\"submit\">Confirm submission</Button>\n\n        <br />\n        <br />\n\n        <div className=\"text-light\">\n        <p><span className=\"text-dark\">Assetcontract: </span>{message[0]} </p>\n         <p><span className=\"text-dark\">NftId's: </span> {message[1]} </p>\n         <p><span className=\"text-dark\">Receiver: </span> {message[2]} </p>\n\n        </div>\n\n        <Button className=\"m-2\" id=\"sendNFT\"  size=\"lg\" onClick={send} >\n              send Nft\n            </Button>\n      </form>\n\n      <p>{status}</p>\n\n          </div>\n        ) : (\n          <Loader />\n        )}\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default BatchTransfer;\n","import { useContract } from \"../hooks\";\nimport erc721 from \"../contracts/erc721.json\";\n\n\n\n// export interface for smart contract\nexport const useERC721 = (_tokenAddress) =>\n  useContract(erc721.abi, _tokenAddress );\n    \n\n  \n","import { Container, Nav } from \"react-bootstrap\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport { Notification } from \"./components/ui/Notifications\";\nimport Wallet from \"./components/Wallet\";\nimport Cover from \"./components/Cover\";\nimport React, {useState} from \"react\";\nimport BatchTransfer from \"./components/BatchTransfer\";\nimport { useBalance, useBatchTransferContract } from \"./hooks\";\nimport \"./App.css\";\n\n\nexport const addressAPI = React.createContext({\n\n})\n\nconst App = function AppWrapper() {\n  const { address, destroy, connect } = useContractKit();\n  const { balance } = useBalance();\n  const batchTransferContract = useBatchTransferContract();\n  const [tokenAddress, settokenAddress] = useState(\"\");\n\n  return (\n    <addressAPI.Provider value={{tokenAddress, settokenAddress}}>\n\n    <>\n      <Notification />\n      {address ? ( \n        <Container fluid=\"md\">\n          <Nav className=\"justify-content-end pt-3 pb-5\">\n            <Nav.Item>\n              {/*display user wallet*/}\n              <Wallet\n                address={address}\n                amount={balance.CELO}\n                symbol=\"CELO\"\n                destroy={destroy}\n              />\n            </Nav.Item>\n          </Nav>\n          {/* display cover */}\n          <main>\n            <BatchTransfer batchTransferContract={batchTransferContract} />\n          </main>\n        </Container>\n      ) : (\n        // display cover if user is not connected\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <Cover connect={connect} />\n          </header>\n        </div>\n      )}\n    </>\n    </addressAPI.Provider>\n  );\n};\n\nexport default App;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\n\nexport const useBalance = () => {\n  const { address, kit } = useContractKit();\n  const [balance, setBalance] = useState(0);\n\n  const getBalance = useCallback(async () => {\n    // fetch a connected wallet token balance\n    const value = await kit.getTotalBalance(address);\n    setBalance(value);\n  }, [address, kit]);\n\n  useEffect(() => {\n    if (address) getBalance();\n  }, [address, getBalance]);\n\n  return {\n    balance,\n    getBalance,\n  };\n};\n","import { useContract } from \"./useContract\";\nimport BatchTransfer from \"../contracts/BatchTransfer.json\";\nimport BatchTransferAddress from \"../contracts/BatchTransferAddress.json\";\n\n// export interface for smart contract\nexport const useBatchTransferContract = () =>\n  useContract(BatchTransfer.abi, BatchTransferAddress.BatchTransfer);\n  \n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  ContractKitProvider,\n  Alfajores,\n  NetworkNames,\n} from \"@celo-tools/use-contractkit\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"@celo-tools/use-contractkit/lib/styles.css\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ContractKitProvider\n      networks={[Alfajores]}\n      network={{\n        name: NetworkNames.Alfajores,\n        rpcUrl: \"https://alfajores-forno.celo-testnet.org\",\n        graphQl: \"https://alfajores-blockscout.celo-testnet.org/graphiql\",\n        explorer: \"https://alfajores-blockscout.celo-testnet.org\",\n        chainId: 44787,\n      }}\n      dapp={{\n        name: \"NFt Bulk Transfer\",\n        description: \"A bulk nft transferer built on Celo Chain\",\n      }}\n    >\n      <App />\n    </ContractKitProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}